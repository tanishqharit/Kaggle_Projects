{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4508,"sourceType":"datasetVersion","datasetId":138}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Title : Movie Recommendation System Using Text Vectorization and Cosine Similarity \n\n- Website Link : \n- Github Link : \n- Kaggle Database Link : https://www.kaggle.com/datasets/tmdb/tmdb-movie-metadata\n- Kaggle Notebook Link : ","metadata":{}},{"cell_type":"markdown","source":"## Flowchart of the Project \n\nPhase 1 : Data Preprocessing \n```mermaid\ngraph LR\n    A[\"Loading Data<br>Merging Dataframes<br>Selecting Favoured Fields\"] \n    A --> B[\"Cleaning any<br>Missing data<br>Duplicated data\"]\n    B --> C[\"Formatting Fields<br>using Helper Functions.<br>Joining Strings for Unique features.\"]\n    C --> D[\"Concatenating Fields<br>to make 'tags' field.<br>Dropping other fields\"]\n    D -->E[\"Smallcase and Stemming<br>Final Dataframe Ready\"]\n```\n\nPhase 2 : Prediction Model \n```mermaid\ngraph LR\n    A[\"Converting 'tags' text into Vectors<br>Text Vectorization's Bag of Words<br>on top 5000 words and Excluding stopwords.\"] \n    A --> B[\"Frequency matrix<br>of each movie on each word.<br>5000 dimensional vector\"]\n    B --> C[\"Computing Cosine Similarity<br>to measure similarity b/w movie vectors<br>forming Similarity Matrix.\"]\n    C --> D[\"Final Model:<br>Identify closest movie vectors and <br>selecting top 5 matches.\"]\n    D -->E[\"Testing : Inputting a movie<br>into prediction function<br>returning top 5 similar movies.\"]\n```\n\nPhase 3 : Web Application and Hosting \n```mermaid\ngraph LR\n    A[\"Loading Data<br>Merging Dataframes<br>Dropping Unwanted Fields<br>\"] \n    A --> B[\"Cleaining any<br>Missing data<br>Duplicated data\"]\n    B --> C[\"Step 3: Preprocess Data<br>Clean data<br>Normalize values\"]\n    C --> D[\"Step 4: Feature Engineering<br>Create new features<br>Transform existing features\"]\n    D -->E[\"Step 5: Train Model<br>Split data<br>Train algorithm\"]\n```","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:28.854678Z","iopub.execute_input":"2025-01-31T22:59:28.855061Z","iopub.status.idle":"2025-01-31T22:59:30.154338Z","shell.execute_reply.started":"2025-01-31T22:59:28.855034Z","shell.execute_reply":"2025-01-31T22:59:30.153328Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# Loading data \nmovies_df = pd.read_csv('/kaggle/input/tmdb-movie-metadata/tmdb_5000_movies.csv')\ncredits_df = pd.read_csv('/kaggle/input/tmdb-movie-metadata/tmdb_5000_credits.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:30.155615Z","iopub.execute_input":"2025-01-31T22:59:30.156070Z","iopub.status.idle":"2025-01-31T22:59:31.156371Z","shell.execute_reply.started":"2025-01-31T22:59:30.156041Z","shell.execute_reply":"2025-01-31T22:59:31.155309Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"movies_df.head(2)","metadata":{"trusted":true,"scrolled":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:31.157981Z","iopub.execute_input":"2025-01-31T22:59:31.158328Z","iopub.status.idle":"2025-01-31T22:59:31.189251Z","shell.execute_reply.started":"2025-01-31T22:59:31.158289Z","shell.execute_reply":"2025-01-31T22:59:31.188367Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"      budget                                             genres  \\\n0  237000000  [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...   \n1  300000000  [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"...   \n\n                                       homepage     id  \\\n0                   http://www.avatarmovie.com/  19995   \n1  http://disney.go.com/disneypictures/pirates/    285   \n\n                                            keywords original_language  \\\n0  [{\"id\": 1463, \"name\": \"culture clash\"}, {\"id\":...                en   \n1  [{\"id\": 270, \"name\": \"ocean\"}, {\"id\": 726, \"na...                en   \n\n                             original_title  \\\n0                                    Avatar   \n1  Pirates of the Caribbean: At World's End   \n\n                                            overview  popularity  \\\n0  In the 22nd century, a paraplegic Marine is di...  150.437577   \n1  Captain Barbossa, long believed to be dead, ha...  139.082615   \n\n                                production_companies  \\\n0  [{\"name\": \"Ingenious Film Partners\", \"id\": 289...   \n1  [{\"name\": \"Walt Disney Pictures\", \"id\": 2}, {\"...   \n\n                                production_countries release_date     revenue  \\\n0  [{\"iso_3166_1\": \"US\", \"name\": \"United States o...   2009-12-10  2787965087   \n1  [{\"iso_3166_1\": \"US\", \"name\": \"United States o...   2007-05-19   961000000   \n\n   runtime                                   spoken_languages    status  \\\n0    162.0  [{\"iso_639_1\": \"en\", \"name\": \"English\"}, {\"iso...  Released   \n1    169.0           [{\"iso_639_1\": \"en\", \"name\": \"English\"}]  Released   \n\n                                          tagline  \\\n0                     Enter the World of Pandora.   \n1  At the end of the world, the adventure begins.   \n\n                                      title  vote_average  vote_count  \n0                                    Avatar           7.2       11800  \n1  Pirates of the Caribbean: At World's End           6.9        4500  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>budget</th>\n      <th>genres</th>\n      <th>homepage</th>\n      <th>id</th>\n      <th>keywords</th>\n      <th>original_language</th>\n      <th>original_title</th>\n      <th>overview</th>\n      <th>popularity</th>\n      <th>production_companies</th>\n      <th>production_countries</th>\n      <th>release_date</th>\n      <th>revenue</th>\n      <th>runtime</th>\n      <th>spoken_languages</th>\n      <th>status</th>\n      <th>tagline</th>\n      <th>title</th>\n      <th>vote_average</th>\n      <th>vote_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>237000000</td>\n      <td>[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...</td>\n      <td>http://www.avatarmovie.com/</td>\n      <td>19995</td>\n      <td>[{\"id\": 1463, \"name\": \"culture clash\"}, {\"id\":...</td>\n      <td>en</td>\n      <td>Avatar</td>\n      <td>In the 22nd century, a paraplegic Marine is di...</td>\n      <td>150.437577</td>\n      <td>[{\"name\": \"Ingenious Film Partners\", \"id\": 289...</td>\n      <td>[{\"iso_3166_1\": \"US\", \"name\": \"United States o...</td>\n      <td>2009-12-10</td>\n      <td>2787965087</td>\n      <td>162.0</td>\n      <td>[{\"iso_639_1\": \"en\", \"name\": \"English\"}, {\"iso...</td>\n      <td>Released</td>\n      <td>Enter the World of Pandora.</td>\n      <td>Avatar</td>\n      <td>7.2</td>\n      <td>11800</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>300000000</td>\n      <td>[{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"...</td>\n      <td>http://disney.go.com/disneypictures/pirates/</td>\n      <td>285</td>\n      <td>[{\"id\": 270, \"name\": \"ocean\"}, {\"id\": 726, \"na...</td>\n      <td>en</td>\n      <td>Pirates of the Caribbean: At World's End</td>\n      <td>Captain Barbossa, long believed to be dead, ha...</td>\n      <td>139.082615</td>\n      <td>[{\"name\": \"Walt Disney Pictures\", \"id\": 2}, {\"...</td>\n      <td>[{\"iso_3166_1\": \"US\", \"name\": \"United States o...</td>\n      <td>2007-05-19</td>\n      <td>961000000</td>\n      <td>169.0</td>\n      <td>[{\"iso_639_1\": \"en\", \"name\": \"English\"}]</td>\n      <td>Released</td>\n      <td>At the end of the world, the adventure begins.</td>\n      <td>Pirates of the Caribbean: At World's End</td>\n      <td>6.9</td>\n      <td>4500</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"credits_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:31.190642Z","iopub.execute_input":"2025-01-31T22:59:31.191051Z","iopub.status.idle":"2025-01-31T22:59:31.201163Z","shell.execute_reply.started":"2025-01-31T22:59:31.191022Z","shell.execute_reply":"2025-01-31T22:59:31.200083Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   movie_id                                     title  \\\n0     19995                                    Avatar   \n1       285  Pirates of the Caribbean: At World's End   \n2    206647                                   Spectre   \n3     49026                     The Dark Knight Rises   \n4     49529                               John Carter   \n\n                                                cast  \\\n0  [{\"cast_id\": 242, \"character\": \"Jake Sully\", \"...   \n1  [{\"cast_id\": 4, \"character\": \"Captain Jack Spa...   \n2  [{\"cast_id\": 1, \"character\": \"James Bond\", \"cr...   \n3  [{\"cast_id\": 2, \"character\": \"Bruce Wayne / Ba...   \n4  [{\"cast_id\": 5, \"character\": \"John Carter\", \"c...   \n\n                                                crew  \n0  [{\"credit_id\": \"52fe48009251416c750aca23\", \"de...  \n1  [{\"credit_id\": \"52fe4232c3a36847f800b579\", \"de...  \n2  [{\"credit_id\": \"54805967c3a36829b5002c41\", \"de...  \n3  [{\"credit_id\": \"52fe4781c3a36847f81398c3\", \"de...  \n4  [{\"credit_id\": \"52fe479ac3a36847f813eaa3\", \"de...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movie_id</th>\n      <th>title</th>\n      <th>cast</th>\n      <th>crew</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19995</td>\n      <td>Avatar</td>\n      <td>[{\"cast_id\": 242, \"character\": \"Jake Sully\", \"...</td>\n      <td>[{\"credit_id\": \"52fe48009251416c750aca23\", \"de...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>285</td>\n      <td>Pirates of the Caribbean: At World's End</td>\n      <td>[{\"cast_id\": 4, \"character\": \"Captain Jack Spa...</td>\n      <td>[{\"credit_id\": \"52fe4232c3a36847f800b579\", \"de...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>206647</td>\n      <td>Spectre</td>\n      <td>[{\"cast_id\": 1, \"character\": \"James Bond\", \"cr...</td>\n      <td>[{\"credit_id\": \"54805967c3a36829b5002c41\", \"de...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>49026</td>\n      <td>The Dark Knight Rises</td>\n      <td>[{\"cast_id\": 2, \"character\": \"Bruce Wayne / Ba...</td>\n      <td>[{\"credit_id\": \"52fe4781c3a36847f81398c3\", \"de...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>49529</td>\n      <td>John Carter</td>\n      <td>[{\"cast_id\": 5, \"character\": \"John Carter\", \"c...</td>\n      <td>[{\"credit_id\": \"52fe479ac3a36847f813eaa3\", \"de...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"markdown","source":"# Data Preprocessing\n## 1. Merging Dataframes \n- Two dataframes : 'movies' and 'credits'.\n- Both have two common fields : 'movie_id' and 'movie_title'\n- To make our work easier, merging both dataframes.","metadata":{}},{"cell_type":"code","source":"# Merging Dataframes by title and displaying new Dataframe columns \nmerged_df = movies_df.merge(credits_df, on = 'title') \nmerged_df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:31.202328Z","iopub.execute_input":"2025-01-31T22:59:31.202715Z","iopub.status.idle":"2025-01-31T22:59:31.266357Z","shell.execute_reply.started":"2025-01-31T22:59:31.202688Z","shell.execute_reply":"2025-01-31T22:59:31.265267Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4809 entries, 0 to 4808\nData columns (total 23 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   budget                4809 non-null   int64  \n 1   genres                4809 non-null   object \n 2   homepage              1713 non-null   object \n 3   id                    4809 non-null   int64  \n 4   keywords              4809 non-null   object \n 5   original_language     4809 non-null   object \n 6   original_title        4809 non-null   object \n 7   overview              4806 non-null   object \n 8   popularity            4809 non-null   float64\n 9   production_companies  4809 non-null   object \n 10  production_countries  4809 non-null   object \n 11  release_date          4808 non-null   object \n 12  revenue               4809 non-null   int64  \n 13  runtime               4807 non-null   float64\n 14  spoken_languages      4809 non-null   object \n 15  status                4809 non-null   object \n 16  tagline               3965 non-null   object \n 17  title                 4809 non-null   object \n 18  vote_average          4809 non-null   float64\n 19  vote_count            4809 non-null   int64  \n 20  movie_id              4809 non-null   int64  \n 21  cast                  4809 non-null   object \n 22  crew                  4809 non-null   object \ndtypes: float64(3), int64(5), object(15)\nmemory usage: 864.2+ KB\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"## 2. Analysing Columns (Favoured Fields)\n- Total 23 columns (movie_id is repeated). \n- We don't need all the columns to build our model. We only need those columns which will help us to create tags. \n- Required Fields : genres, movie_id, keywords, overview, title, cast, crew ","metadata":{}},{"cell_type":"code","source":"# Favoured fields \nmovies = merged_df[['movie_id', 'title', 'overview', 'genres', 'keywords', 'cast', 'crew']]\nmovies.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:31.267343Z","iopub.execute_input":"2025-01-31T22:59:31.267665Z","iopub.status.idle":"2025-01-31T22:59:31.283514Z","shell.execute_reply.started":"2025-01-31T22:59:31.267639Z","shell.execute_reply":"2025-01-31T22:59:31.282243Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"   movie_id                                     title  \\\n0     19995                                    Avatar   \n1       285  Pirates of the Caribbean: At World's End   \n2    206647                                   Spectre   \n3     49026                     The Dark Knight Rises   \n4     49529                               John Carter   \n\n                                            overview  \\\n0  In the 22nd century, a paraplegic Marine is di...   \n1  Captain Barbossa, long believed to be dead, ha...   \n2  A cryptic message from Bond’s past sends him o...   \n3  Following the death of District Attorney Harve...   \n4  John Carter is a war-weary, former military ca...   \n\n                                              genres  \\\n0  [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...   \n1  [{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"...   \n2  [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...   \n3  [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 80, \"nam...   \n4  [{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...   \n\n                                            keywords  \\\n0  [{\"id\": 1463, \"name\": \"culture clash\"}, {\"id\":...   \n1  [{\"id\": 270, \"name\": \"ocean\"}, {\"id\": 726, \"na...   \n2  [{\"id\": 470, \"name\": \"spy\"}, {\"id\": 818, \"name...   \n3  [{\"id\": 849, \"name\": \"dc comics\"}, {\"id\": 853,...   \n4  [{\"id\": 818, \"name\": \"based on novel\"}, {\"id\":...   \n\n                                                cast  \\\n0  [{\"cast_id\": 242, \"character\": \"Jake Sully\", \"...   \n1  [{\"cast_id\": 4, \"character\": \"Captain Jack Spa...   \n2  [{\"cast_id\": 1, \"character\": \"James Bond\", \"cr...   \n3  [{\"cast_id\": 2, \"character\": \"Bruce Wayne / Ba...   \n4  [{\"cast_id\": 5, \"character\": \"John Carter\", \"c...   \n\n                                                crew  \n0  [{\"credit_id\": \"52fe48009251416c750aca23\", \"de...  \n1  [{\"credit_id\": \"52fe4232c3a36847f800b579\", \"de...  \n2  [{\"credit_id\": \"54805967c3a36829b5002c41\", \"de...  \n3  [{\"credit_id\": \"52fe4781c3a36847f81398c3\", \"de...  \n4  [{\"credit_id\": \"52fe479ac3a36847f813eaa3\", \"de...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movie_id</th>\n      <th>title</th>\n      <th>overview</th>\n      <th>genres</th>\n      <th>keywords</th>\n      <th>cast</th>\n      <th>crew</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19995</td>\n      <td>Avatar</td>\n      <td>In the 22nd century, a paraplegic Marine is di...</td>\n      <td>[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...</td>\n      <td>[{\"id\": 1463, \"name\": \"culture clash\"}, {\"id\":...</td>\n      <td>[{\"cast_id\": 242, \"character\": \"Jake Sully\", \"...</td>\n      <td>[{\"credit_id\": \"52fe48009251416c750aca23\", \"de...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>285</td>\n      <td>Pirates of the Caribbean: At World's End</td>\n      <td>Captain Barbossa, long believed to be dead, ha...</td>\n      <td>[{\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"...</td>\n      <td>[{\"id\": 270, \"name\": \"ocean\"}, {\"id\": 726, \"na...</td>\n      <td>[{\"cast_id\": 4, \"character\": \"Captain Jack Spa...</td>\n      <td>[{\"credit_id\": \"52fe4232c3a36847f800b579\", \"de...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>206647</td>\n      <td>Spectre</td>\n      <td>A cryptic message from Bond’s past sends him o...</td>\n      <td>[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...</td>\n      <td>[{\"id\": 470, \"name\": \"spy\"}, {\"id\": 818, \"name...</td>\n      <td>[{\"cast_id\": 1, \"character\": \"James Bond\", \"cr...</td>\n      <td>[{\"credit_id\": \"54805967c3a36829b5002c41\", \"de...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>49026</td>\n      <td>The Dark Knight Rises</td>\n      <td>Following the death of District Attorney Harve...</td>\n      <td>[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 80, \"nam...</td>\n      <td>[{\"id\": 849, \"name\": \"dc comics\"}, {\"id\": 853,...</td>\n      <td>[{\"cast_id\": 2, \"character\": \"Bruce Wayne / Ba...</td>\n      <td>[{\"credit_id\": \"52fe4781c3a36847f81398c3\", \"de...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>49529</td>\n      <td>John Carter</td>\n      <td>John Carter is a war-weary, former military ca...</td>\n      <td>[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"nam...</td>\n      <td>[{\"id\": 818, \"name\": \"based on novel\"}, {\"id\":...</td>\n      <td>[{\"cast_id\": 5, \"character\": \"John Carter\", \"c...</td>\n      <td>[{\"credit_id\": \"52fe479ac3a36847f813eaa3\", \"de...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":7},{"cell_type":"markdown","source":"## 3. Perparation for 'tags' column \n- We will be making 'tags' field from 'overview', 'genres', 'keywords', 'cast', 'crew'.\n- Before merging all tags from all 5 fields into 1, first we need to format all the fields (make them lists).","metadata":{}},{"cell_type":"code","source":"# Any missing values ? \nprint(movies.isnull().sum())\nprint()\nprint(f'Rows and columns {movies.shape}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:31.284766Z","iopub.execute_input":"2025-01-31T22:59:31.285144Z","iopub.status.idle":"2025-01-31T22:59:31.308085Z","shell.execute_reply.started":"2025-01-31T22:59:31.285113Z","shell.execute_reply":"2025-01-31T22:59:31.307001Z"}},"outputs":[{"name":"stdout","text":"movie_id    0\ntitle       0\noverview    3\ngenres      0\nkeywords    0\ncast        0\ncrew        0\ndtype: int64\n\nRows and columns (4809, 7)\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"# Dropping rows with missing values \nmovies = movies[movies['overview'].notnull()]\nprint(f'Rows and columns {movies.shape}')\nprint('3 Rows dropped.')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:31.309154Z","iopub.execute_input":"2025-01-31T22:59:31.309530Z","iopub.status.idle":"2025-01-31T22:59:31.333026Z","shell.execute_reply.started":"2025-01-31T22:59:31.309490Z","shell.execute_reply":"2025-01-31T22:59:31.331474Z"}},"outputs":[{"name":"stdout","text":"Rows and columns (4806, 7)\n3 Rows dropped.\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"# Checking duplicates \nmovies.duplicated().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:31.337142Z","iopub.execute_input":"2025-01-31T22:59:31.337453Z","iopub.status.idle":"2025-01-31T22:59:31.455146Z","shell.execute_reply.started":"2025-01-31T22:59:31.337431Z","shell.execute_reply":"2025-01-31T22:59:31.449122Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}],"execution_count":10},{"cell_type":"markdown","source":"## 3.1 Formatting Columns - genres, keywords","metadata":{}},{"cell_type":"code","source":"# Checking out 1 'genres' entry \nprint(movies['genres'][0])\nprint()\n# Checking out 1 'keywords' entry \nprint(movies['keywords'][0])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:31.457554Z","iopub.execute_input":"2025-01-31T22:59:31.458026Z","iopub.status.idle":"2025-01-31T22:59:31.464770Z","shell.execute_reply.started":"2025-01-31T22:59:31.457995Z","shell.execute_reply":"2025-01-31T22:59:31.463458Z"}},"outputs":[{"name":"stdout","text":"[{\"id\": 28, \"name\": \"Action\"}, {\"id\": 12, \"name\": \"Adventure\"}, {\"id\": 14, \"name\": \"Fantasy\"}, {\"id\": 878, \"name\": \"Science Fiction\"}]\n\n[{\"id\": 1463, \"name\": \"culture clash\"}, {\"id\": 2964, \"name\": \"future\"}, {\"id\": 3386, \"name\": \"space war\"}, {\"id\": 3388, \"name\": \"space colony\"}, {\"id\": 3679, \"name\": \"society\"}, {\"id\": 3801, \"name\": \"space travel\"}, {\"id\": 9685, \"name\": \"futuristic\"}, {\"id\": 9840, \"name\": \"romance\"}, {\"id\": 9882, \"name\": \"space\"}, {\"id\": 9951, \"name\": \"alien\"}, {\"id\": 10148, \"name\": \"tribe\"}, {\"id\": 10158, \"name\": \"alien planet\"}, {\"id\": 10987, \"name\": \"cgi\"}, {\"id\": 11399, \"name\": \"marine\"}, {\"id\": 13065, \"name\": \"soldier\"}, {\"id\": 14643, \"name\": \"battle\"}, {\"id\": 14720, \"name\": \"love affair\"}, {\"id\": 165431, \"name\": \"anti war\"}, {\"id\": 193554, \"name\": \"power relations\"}, {\"id\": 206690, \"name\": \"mind and soul\"}, {\"id\": 209714, \"name\": \"3d\"}]\n","output_type":"stream"}],"execution_count":11},{"cell_type":"markdown","source":"- Each entry is (multiple dictionaries in a list which is actually a string). This is problematic.\n- We only need 'name' value from both the entries. And make them into our desired list.\n- For example : ['Action', 'Adventure', 'Fantasy', 'Science Fiction']\n- We can use ast.literal_eval function - this will change this big string back to a list.\n- To do this process to all the entries, we will make a helper function.","metadata":{}},{"cell_type":"code","source":"import ast\n\n# Helper Function \ndef convert(object):\n    List = []\n    for i in ast.literal_eval(object):\n        List.append(i['name'])\n    return List \n\n# Applying Helper Function \nmovies['genres'] = movies['genres'].apply(convert)\nmovies['keywords'] = movies['keywords'].apply(convert)\n\nprint('Done')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:31.465961Z","iopub.execute_input":"2025-01-31T22:59:31.466249Z","iopub.status.idle":"2025-01-31T22:59:32.087231Z","shell.execute_reply.started":"2025-01-31T22:59:31.466214Z","shell.execute_reply":"2025-01-31T22:59:32.086269Z"}},"outputs":[{"name":"stdout","text":"Done\n","output_type":"stream"}],"execution_count":12},{"cell_type":"markdown","source":"## 3.2 Formatting Columns - cast \n- Similar format : list of dictionaries which is a string \n- We only need first 3 entries from the list (top 3 actors) from the list ","metadata":{}},{"cell_type":"code","source":"# Helper function for 'cast' field \ndef convert_cast(object):\n    List = []\n    counter = 0 \n    for i in ast.literal_eval(object):\n        if counter != 3:\n            List.append(i['name'])\n            counter += 1\n        else:\n            break \n    return List \n\n# Applying Helper function \nmovies['cast'] = movies['cast'].apply(convert_cast)\n\nprint('Done')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:32.088232Z","iopub.execute_input":"2025-01-31T22:59:32.088498Z","iopub.status.idle":"2025-01-31T22:59:35.297035Z","shell.execute_reply.started":"2025-01-31T22:59:32.088475Z","shell.execute_reply":"2025-01-31T22:59:35.296087Z"}},"outputs":[{"name":"stdout","text":"Done\n","output_type":"stream"}],"execution_count":13},{"cell_type":"markdown","source":"## 3.3 Formatting Columns - crew \n- Similar format : list of dictionaries which is a string\n- Here, we only need 'name' of 'job' == 'Director'","metadata":{}},{"cell_type":"code","source":"# Helper Function for 'crew' field \ndef fetch_director(object):\n    List = []\n    for i in ast.literal_eval(object):\n        if i['job'] == 'Director':\n            List.append(i['name'])\n            break\n    return List\n\n# Applying Helper function \nmovies['crew'] = movies['crew'].apply(fetch_director)\n\nprint('Done')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:35.298133Z","iopub.execute_input":"2025-01-31T22:59:35.298410Z","iopub.status.idle":"2025-01-31T22:59:38.941104Z","shell.execute_reply.started":"2025-01-31T22:59:35.298377Z","shell.execute_reply":"2025-01-31T22:59:38.940047Z"}},"outputs":[{"name":"stdout","text":"Done\n","output_type":"stream"}],"execution_count":14},{"cell_type":"markdown","source":"## 3.4 Formatting Columns - overview\n- Each entry is a string. Converting this to list so we can concatenate with other lists.","metadata":{}},{"cell_type":"code","source":"# Converting to list\nmovies['overview'] = movies['overview'].apply(lambda x:x.split())\n\nprint('Done')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:38.942055Z","iopub.execute_input":"2025-01-31T22:59:38.942329Z","iopub.status.idle":"2025-01-31T22:59:38.984884Z","shell.execute_reply.started":"2025-01-31T22:59:38.942304Z","shell.execute_reply":"2025-01-31T22:59:38.983889Z"}},"outputs":[{"name":"stdout","text":"Done\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"# Finally, \nmovies.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:38.985807Z","iopub.execute_input":"2025-01-31T22:59:38.986136Z","iopub.status.idle":"2025-01-31T22:59:39.006668Z","shell.execute_reply.started":"2025-01-31T22:59:38.986111Z","shell.execute_reply":"2025-01-31T22:59:39.005516Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"   movie_id                                     title  \\\n0     19995                                    Avatar   \n1       285  Pirates of the Caribbean: At World's End   \n2    206647                                   Spectre   \n3     49026                     The Dark Knight Rises   \n4     49529                               John Carter   \n\n                                            overview  \\\n0  [In, the, 22nd, century,, a, paraplegic, Marin...   \n1  [Captain, Barbossa,, long, believed, to, be, d...   \n2  [A, cryptic, message, from, Bond’s, past, send...   \n3  [Following, the, death, of, District, Attorney...   \n4  [John, Carter, is, a, war-weary,, former, mili...   \n\n                                          genres  \\\n0  [Action, Adventure, Fantasy, Science Fiction]   \n1                   [Adventure, Fantasy, Action]   \n2                     [Action, Adventure, Crime]   \n3               [Action, Crime, Drama, Thriller]   \n4           [Action, Adventure, Science Fiction]   \n\n                                            keywords  \\\n0  [culture clash, future, space war, space colon...   \n1  [ocean, drug abuse, exotic island, east india ...   \n2  [spy, based on novel, secret agent, sequel, mi...   \n3  [dc comics, crime fighter, terrorist, secret i...   \n4  [based on novel, mars, medallion, space travel...   \n\n                                               cast                 crew  \n0  [Sam Worthington, Zoe Saldana, Sigourney Weaver]      [James Cameron]  \n1     [Johnny Depp, Orlando Bloom, Keira Knightley]     [Gore Verbinski]  \n2      [Daniel Craig, Christoph Waltz, Léa Seydoux]         [Sam Mendes]  \n3      [Christian Bale, Michael Caine, Gary Oldman]  [Christopher Nolan]  \n4    [Taylor Kitsch, Lynn Collins, Samantha Morton]     [Andrew Stanton]  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movie_id</th>\n      <th>title</th>\n      <th>overview</th>\n      <th>genres</th>\n      <th>keywords</th>\n      <th>cast</th>\n      <th>crew</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19995</td>\n      <td>Avatar</td>\n      <td>[In, the, 22nd, century,, a, paraplegic, Marin...</td>\n      <td>[Action, Adventure, Fantasy, Science Fiction]</td>\n      <td>[culture clash, future, space war, space colon...</td>\n      <td>[Sam Worthington, Zoe Saldana, Sigourney Weaver]</td>\n      <td>[James Cameron]</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>285</td>\n      <td>Pirates of the Caribbean: At World's End</td>\n      <td>[Captain, Barbossa,, long, believed, to, be, d...</td>\n      <td>[Adventure, Fantasy, Action]</td>\n      <td>[ocean, drug abuse, exotic island, east india ...</td>\n      <td>[Johnny Depp, Orlando Bloom, Keira Knightley]</td>\n      <td>[Gore Verbinski]</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>206647</td>\n      <td>Spectre</td>\n      <td>[A, cryptic, message, from, Bond’s, past, send...</td>\n      <td>[Action, Adventure, Crime]</td>\n      <td>[spy, based on novel, secret agent, sequel, mi...</td>\n      <td>[Daniel Craig, Christoph Waltz, Léa Seydoux]</td>\n      <td>[Sam Mendes]</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>49026</td>\n      <td>The Dark Knight Rises</td>\n      <td>[Following, the, death, of, District, Attorney...</td>\n      <td>[Action, Crime, Drama, Thriller]</td>\n      <td>[dc comics, crime fighter, terrorist, secret i...</td>\n      <td>[Christian Bale, Michael Caine, Gary Oldman]</td>\n      <td>[Christopher Nolan]</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>49529</td>\n      <td>John Carter</td>\n      <td>[John, Carter, is, a, war-weary,, former, mili...</td>\n      <td>[Action, Adventure, Science Fiction]</td>\n      <td>[based on novel, mars, medallion, space travel...</td>\n      <td>[Taylor Kitsch, Lynn Collins, Samantha Morton]</td>\n      <td>[Andrew Stanton]</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":16},{"cell_type":"markdown","source":"## 3.5 Transforming Strings in Fields\n- Remove spaces to avoid duplication.\n- Example: Sam Worthington and Sam Mendes should be SamWorthington and SamMendes.\n- If we don't do this, if someone likes Sam Worthington movies, that person might get recommendations from Sam Mendes beacuse 'Sam' is a single, unique feature.","metadata":{}},{"cell_type":"code","source":"# Removing spaces in all 4 fields (except overview)\nmovies['genres'] = movies['genres'].apply(lambda x:[i.replace(\" \", \"\") for i in x])\nmovies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(\" \", \"\") for i in x])\nmovies['cast'] = movies['cast'].apply(lambda x:[i.replace(\" \", \"\") for i in x])\nmovies['crew'] = movies['crew'].apply(lambda x:[i.replace(\" \", \"\") for i in x])\n\nprint('Done')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:39.007968Z","iopub.execute_input":"2025-01-31T22:59:39.008341Z","iopub.status.idle":"2025-01-31T22:59:39.080380Z","shell.execute_reply.started":"2025-01-31T22:59:39.008295Z","shell.execute_reply":"2025-01-31T22:59:39.078908Z"}},"outputs":[{"name":"stdout","text":"Done\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"movies.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:39.081793Z","iopub.execute_input":"2025-01-31T22:59:39.082249Z","iopub.status.idle":"2025-01-31T22:59:39.110856Z","shell.execute_reply.started":"2025-01-31T22:59:39.082205Z","shell.execute_reply":"2025-01-31T22:59:39.108812Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"   movie_id                                     title  \\\n0     19995                                    Avatar   \n1       285  Pirates of the Caribbean: At World's End   \n2    206647                                   Spectre   \n3     49026                     The Dark Knight Rises   \n4     49529                               John Carter   \n\n                                            overview  \\\n0  [In, the, 22nd, century,, a, paraplegic, Marin...   \n1  [Captain, Barbossa,, long, believed, to, be, d...   \n2  [A, cryptic, message, from, Bond’s, past, send...   \n3  [Following, the, death, of, District, Attorney...   \n4  [John, Carter, is, a, war-weary,, former, mili...   \n\n                                         genres  \\\n0  [Action, Adventure, Fantasy, ScienceFiction]   \n1                  [Adventure, Fantasy, Action]   \n2                    [Action, Adventure, Crime]   \n3              [Action, Crime, Drama, Thriller]   \n4           [Action, Adventure, ScienceFiction]   \n\n                                            keywords  \\\n0  [cultureclash, future, spacewar, spacecolony, ...   \n1  [ocean, drugabuse, exoticisland, eastindiatrad...   \n2  [spy, basedonnovel, secretagent, sequel, mi6, ...   \n3  [dccomics, crimefighter, terrorist, secretiden...   \n4  [basedonnovel, mars, medallion, spacetravel, p...   \n\n                                            cast                crew  \n0  [SamWorthington, ZoeSaldana, SigourneyWeaver]      [JamesCameron]  \n1     [JohnnyDepp, OrlandoBloom, KeiraKnightley]     [GoreVerbinski]  \n2      [DanielCraig, ChristophWaltz, LéaSeydoux]         [SamMendes]  \n3      [ChristianBale, MichaelCaine, GaryOldman]  [ChristopherNolan]  \n4    [TaylorKitsch, LynnCollins, SamanthaMorton]     [AndrewStanton]  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movie_id</th>\n      <th>title</th>\n      <th>overview</th>\n      <th>genres</th>\n      <th>keywords</th>\n      <th>cast</th>\n      <th>crew</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19995</td>\n      <td>Avatar</td>\n      <td>[In, the, 22nd, century,, a, paraplegic, Marin...</td>\n      <td>[Action, Adventure, Fantasy, ScienceFiction]</td>\n      <td>[cultureclash, future, spacewar, spacecolony, ...</td>\n      <td>[SamWorthington, ZoeSaldana, SigourneyWeaver]</td>\n      <td>[JamesCameron]</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>285</td>\n      <td>Pirates of the Caribbean: At World's End</td>\n      <td>[Captain, Barbossa,, long, believed, to, be, d...</td>\n      <td>[Adventure, Fantasy, Action]</td>\n      <td>[ocean, drugabuse, exoticisland, eastindiatrad...</td>\n      <td>[JohnnyDepp, OrlandoBloom, KeiraKnightley]</td>\n      <td>[GoreVerbinski]</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>206647</td>\n      <td>Spectre</td>\n      <td>[A, cryptic, message, from, Bond’s, past, send...</td>\n      <td>[Action, Adventure, Crime]</td>\n      <td>[spy, basedonnovel, secretagent, sequel, mi6, ...</td>\n      <td>[DanielCraig, ChristophWaltz, LéaSeydoux]</td>\n      <td>[SamMendes]</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>49026</td>\n      <td>The Dark Knight Rises</td>\n      <td>[Following, the, death, of, District, Attorney...</td>\n      <td>[Action, Crime, Drama, Thriller]</td>\n      <td>[dccomics, crimefighter, terrorist, secretiden...</td>\n      <td>[ChristianBale, MichaelCaine, GaryOldman]</td>\n      <td>[ChristopherNolan]</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>49529</td>\n      <td>John Carter</td>\n      <td>[John, Carter, is, a, war-weary,, former, mili...</td>\n      <td>[Action, Adventure, ScienceFiction]</td>\n      <td>[basedonnovel, mars, medallion, spacetravel, p...</td>\n      <td>[TaylorKitsch, LynnCollins, SamanthaMorton]</td>\n      <td>[AndrewStanton]</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":18},{"cell_type":"markdown","source":"## 4. Creating 'tags' field\n- Concatenating all the lists and saving it into 'tags' column.\n- Removing everything except 'movie_id', 'title' and 'tags'.\n- Converting final list to string.\n- Making string lowercase.\n- Stemming the words, to avoid multiple words for a single feature.","metadata":{}},{"cell_type":"code","source":"# Creating 'tags' column \nmovies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']\n\n# Converting 'tags' list to string \nmovies['tags'] = movies['tags'].apply(lambda x:\" \".join(x))\n\n# Making everything samllcase in 'tags'\nmovies['tags'] = movies['tags'].apply(lambda x:x.lower())\n\n# Removing other fields \nmovies = movies[['movie_id','title','tags']]\n\nprint('Done')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:39.112197Z","iopub.execute_input":"2025-01-31T22:59:39.112536Z","iopub.status.idle":"2025-01-31T22:59:39.318343Z","shell.execute_reply.started":"2025-01-31T22:59:39.112479Z","shell.execute_reply":"2025-01-31T22:59:39.317252Z"}},"outputs":[{"name":"stdout","text":"Done\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"# Stemming the words \nimport nltk \nfrom nltk.stem.porter import PorterStemmer\nps = PorterStemmer()\n\n# Stemming Function \ndef stem(text):\n    List = []\n    for i in text.split():\n        List.append(ps.stem(i))\n\n    return \" \".join(List)\n\n# Applying Stemming function to 'tags' column \nmovies['tags'] = movies['tags'].apply(stem)\n\nprint('Done')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:39.319312Z","iopub.execute_input":"2025-01-31T22:59:39.319675Z","iopub.status.idle":"2025-01-31T22:59:47.224248Z","shell.execute_reply.started":"2025-01-31T22:59:39.319647Z","shell.execute_reply":"2025-01-31T22:59:47.222812Z"}},"outputs":[{"name":"stdout","text":"Done\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"movies.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:47.225415Z","iopub.execute_input":"2025-01-31T22:59:47.226047Z","iopub.status.idle":"2025-01-31T22:59:47.237162Z","shell.execute_reply.started":"2025-01-31T22:59:47.226005Z","shell.execute_reply":"2025-01-31T22:59:47.235713Z"}},"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"   movie_id                                     title  \\\n0     19995                                    Avatar   \n1       285  Pirates of the Caribbean: At World's End   \n2    206647                                   Spectre   \n3     49026                     The Dark Knight Rises   \n4     49529                               John Carter   \n\n                                                tags  \n0  in the 22nd century, a parapleg marin is dispa...  \n1  captain barbossa, long believ to be dead, ha c...  \n2  a cryptic messag from bond’ past send him on a...  \n3  follow the death of district attorney harvey d...  \n4  john carter is a war-weary, former militari ca...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movie_id</th>\n      <th>title</th>\n      <th>tags</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19995</td>\n      <td>Avatar</td>\n      <td>in the 22nd century, a parapleg marin is dispa...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>285</td>\n      <td>Pirates of the Caribbean: At World's End</td>\n      <td>captain barbossa, long believ to be dead, ha c...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>206647</td>\n      <td>Spectre</td>\n      <td>a cryptic messag from bond’ past send him on a...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>49026</td>\n      <td>The Dark Knight Rises</td>\n      <td>follow the death of district attorney harvey d...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>49529</td>\n      <td>John Carter</td>\n      <td>john carter is a war-weary, former militari ca...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"# Let's see 1 'tags' entry\nmovies['tags'][0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:47.238123Z","iopub.execute_input":"2025-01-31T22:59:47.238463Z","iopub.status.idle":"2025-01-31T22:59:47.257583Z","shell.execute_reply.started":"2025-01-31T22:59:47.238420Z","shell.execute_reply":"2025-01-31T22:59:47.256561Z"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"'in the 22nd century, a parapleg marin is dispatch to the moon pandora on a uniqu mission, but becom torn between follow order and protect an alien civilization. action adventur fantasi sciencefict cultureclash futur spacewar spacecoloni societi spacetravel futurist romanc space alien tribe alienplanet cgi marin soldier battl loveaffair antiwar powerrel mindandsoul 3d samworthington zoesaldana sigourneyweav jamescameron'"},"metadata":{}}],"execution_count":22},{"cell_type":"markdown","source":"# Text Vectorization\n\n### Problem Statement : Out of 5000 movies, how will we know which movies are similar ?\n- We want to tell the similarity on the basis of tags.\n- Basically, we have to calculate similarity score between 'tags' texts.\n- Now the problem is, this is textual data. \n- SOLUTION : We will convert this text to a vector, this is called Text Vectorization.\n\n### Bag of Words Technique \n- There are multiple techniques to do text vecotrisation : Bag of Words, tfidf, WordToVec etc.\n- In Bag of Words technique, we concatenate all the 'tags' (words) of all the rows in the 'tags' field.\n- Suppose there are 100 words in 'tags' in each movie, and by combining all 5000 movies, there would be 500000 words.\n- Top 5000: Now, from this large text, we will extract 5000 most common words.(excluding stopwords)\n- Now we will compare 5000 movies with these top 5000 words.\n- A big matrix for word frequencies in each movie.\n- Matrix Shape (5000,5000). Here, each row is a vector. (In a 5000 dimensional space)\n\n| Word_Freq  | Word_1 | Word_2 | Word_3 | ... | Word_5000 |\n|------------|--------|--------|--------|-----|-----------|\n| Movie_1    |  5     |  3     | 0      | ... | 0         |\n| Movie_2    |  2     |  0     | 3      | ... | 0         |\n| Movie_3    |  1     |  4     | 1      | ... | 0         |\n|     .      |  .     |  .     | .      | ... | .         |\n|     .      |  .     |  .     | .      | ... | .         |\n|     .      |  .     |  .     | .      | ... | .         |\n| Movie_5000 |  5     |  3     | 0      | ... | 0         |\n\n## Code Application \n- Using Scikit-Learn's CountVectorizer class.\n- We will also use max_features parameter and stop_words parameter to limit words and exclude stopwords respectively.\n- Then, we will fit_transform method to convert text data into a sparse matrix (later converted to a NumPy array).\n- Finally, applying vectoizer to the 'tags' field.","metadata":{}},{"cell_type":"code","source":"# Importing CountVectorizer and making CountVectorizer object. \nfrom sklearn.feature_extraction.text import CountVectorizer \ncv = CountVectorizer(max_features = 5000, stop_words = 'english')\n\n# Applying to 'tags' field \nmovie_vectors = cv.fit_transform(movies['tags']).toarray()\n\nprint('Done')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:47.258746Z","iopub.execute_input":"2025-01-31T22:59:47.259053Z","iopub.status.idle":"2025-01-31T22:59:47.840040Z","shell.execute_reply.started":"2025-01-31T22:59:47.259027Z","shell.execute_reply":"2025-01-31T22:59:47.838868Z"}},"outputs":[{"name":"stdout","text":"Done\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"# Matrix and its shape \nprint(movie_vectors.shape)\nmovie_vectors\n\n# Majority is 0 because majority words did not appear in the 'tags' of a particular movie.","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:47.841052Z","iopub.execute_input":"2025-01-31T22:59:47.841378Z","iopub.status.idle":"2025-01-31T22:59:47.849099Z","shell.execute_reply.started":"2025-01-31T22:59:47.841353Z","shell.execute_reply":"2025-01-31T22:59:47.847892Z"}},"outputs":[{"name":"stdout","text":"(4806, 5000)\n","output_type":"stream"},{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"array([[0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       ...,\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0]])"},"metadata":{}}],"execution_count":24},{"cell_type":"code","source":"# What are those 5000 words ? There are too many words, so lets see first 100 words. \n# These words not arrnaged by frequency but alphabetically. \n\ncv.get_feature_names_out()[:100]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:47.850212Z","iopub.execute_input":"2025-01-31T22:59:47.850550Z","iopub.status.idle":"2025-01-31T22:59:47.876729Z","shell.execute_reply.started":"2025-01-31T22:59:47.850507Z","shell.execute_reply":"2025-01-31T22:59:47.875854Z"}},"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"array(['000', '007', '10', '100', '11', '12', '13', '14', '15', '16',\n       '17', '17th', '18', '18th', '18thcenturi', '19', '1910', '1920',\n       '1930', '1940', '1944', '1950', '1950s', '1960', '1960s', '1970',\n       '1970s', '1971', '1974', '1976', '1980', '1985', '1990', '1999',\n       '19th', '19thcenturi', '20', '200', '2003', '2009', '20th', '21st',\n       '23', '24', '25', '30', '300', '3d', '40', '50', '500', '60', '70',\n       '80', 'aaron', 'aaroneckhart', 'abandon', 'abduct',\n       'abigailbreslin', 'abil', 'abl', 'aboard', 'abov', 'abus',\n       'academ', 'academi', 'accept', 'access', 'accid', 'accident',\n       'acclaim', 'accompani', 'accomplish', 'account', 'accus', 'ace',\n       'achiev', 'acquaint', 'act', 'action', 'actionhero', 'activ',\n       'activist', 'activities', 'actor', 'actress', 'actual', 'ad',\n       'adam', 'adamsandl', 'adamshankman', 'adapt', 'add', 'addict',\n       'adjust', 'admir', 'admit', 'adolesc', 'adopt', 'ador'],\n      dtype=object)"},"metadata":{}}],"execution_count":25},{"cell_type":"markdown","source":"# Prediction using Cosine Similarity\n\n## Understanding \n- We have 4806 movies or vectors and each each vector has 5000 elements (frequent_words).\n- Now, we have 4806 vectors in a 5000 dimensional space.\n- To get similar movies, we need closest vectors to that movie_vector.\n- To do this, we will calculate Cosine Distance (not Euclidean distance).\n- Euclidean distance is prone to fail in High dimensional data.\n- So, distance is inversely proportional to similarity, lesser the distance more similar the movie.\n- So, the 5 most closest vectors are going to be the top 5 movie Recommendations.\n\n## Cosine Distance \n- Using Scikit-Learn's Cosine Similarity\n- Passing all the vectors in the Cosine Similarity function.\n- Then we will calculate cosine distance of each vector with every other vector.","metadata":{}},{"cell_type":"code","source":"# Importing and Applying \nfrom sklearn.metrics.pairwise import cosine_similarity\nMovies_Cosine_Similarity = cosine_similarity(movie_vectors)\n\nprint(Movies_Cosine_Similarity.shape)\nprint(Movies_Cosine_Similarity)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:47.877785Z","iopub.execute_input":"2025-01-31T22:59:47.878098Z","iopub.status.idle":"2025-01-31T22:59:50.107477Z","shell.execute_reply.started":"2025-01-31T22:59:47.878070Z","shell.execute_reply":"2025-01-31T22:59:50.106425Z"}},"outputs":[{"name":"stdout","text":"(4806, 4806)\n[[1.         0.08346223 0.0860309  ... 0.04499213 0.         0.        ]\n [0.08346223 1.         0.06063391 ... 0.02378257 0.         0.02615329]\n [0.0860309  0.06063391 1.         ... 0.02451452 0.         0.        ]\n ...\n [0.04499213 0.02378257 0.02451452 ... 1.         0.03962144 0.04229549]\n [0.         0.         0.         ... 0.03962144 1.         0.08714204]\n [0.         0.02615329 0.         ... 0.04229549 0.08714204 1.        ]]\n","output_type":"stream"}],"execution_count":26},{"cell_type":"markdown","source":"## Main Recommendation Function \n- If we input a movie, it will return 5 most similar movies.\n- Firstly, we need the index of the input movie in the 'Movies_Cosine_Similarity' matrix.\n- Then we will take that movie vector (array) and sort the array by top 5 highest socres.\n- Finally, return the top 5 movie_vectors.","metadata":{}},{"cell_type":"code","source":"def recommend(input_movie):\n\n    movie_index = movies[movies['title'] == input_movie].index[0]\n    distances = Movies_Cosine_Similarity[movie_index]\n    movies_list = sorted(list(enumerate(distances)), reverse = True, key = lambda x:x[1])[1:6]\n\n    for i in movies_list:\n        print(movies.iloc[i[0]].title)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:50.108735Z","iopub.execute_input":"2025-01-31T22:59:50.109061Z","iopub.status.idle":"2025-01-31T22:59:50.115467Z","shell.execute_reply.started":"2025-01-31T22:59:50.109029Z","shell.execute_reply":"2025-01-31T22:59:50.114125Z"}},"outputs":[],"execution_count":27},{"cell_type":"markdown","source":"## Testing\n- Giving different movies as inputs to test the main function.\n- CAUTION: Make sure the movie name is correct and is a string.\n- We can copy movie title from Kaggle database.","metadata":{}},{"cell_type":"code","source":"recommend('Batman Begins')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:50.119732Z","iopub.execute_input":"2025-01-31T22:59:50.120099Z","iopub.status.idle":"2025-01-31T22:59:50.143700Z","shell.execute_reply.started":"2025-01-31T22:59:50.120069Z","shell.execute_reply":"2025-01-31T22:59:50.142334Z"}},"outputs":[{"name":"stdout","text":"The Dark Knight\nBatman\nBatman\nThe Dark Knight Rises\n10th & Wolf\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"recommend('The Hobbit: An Unexpected Journey')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:50.145302Z","iopub.execute_input":"2025-01-31T22:59:50.145658Z","iopub.status.idle":"2025-01-31T22:59:50.170470Z","shell.execute_reply.started":"2025-01-31T22:59:50.145627Z","shell.execute_reply":"2025-01-31T22:59:50.169441Z"}},"outputs":[{"name":"stdout","text":"The Hobbit: The Desolation of Smaug\nThe Hobbit: The Battle of the Five Armies\nThe Lord of the Rings: The Fellowship of the Ring\nThe Lord of the Rings: The Two Towers\nThe Lord of the Rings: The Return of the King\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"recommend('Captain America: The First Avenger')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:50.171659Z","iopub.execute_input":"2025-01-31T22:59:50.172005Z","iopub.status.idle":"2025-01-31T22:59:50.196264Z","shell.execute_reply.started":"2025-01-31T22:59:50.171975Z","shell.execute_reply":"2025-01-31T22:59:50.195180Z"}},"outputs":[{"name":"stdout","text":"Captain America: Civil War\nRed Tails\nSaints and Soldiers\nLetters from Iwo Jima\nCaptain America: The Winter Soldier\n","output_type":"stream"}],"execution_count":30},{"cell_type":"code","source":"recommend('The Girl with the Dragon Tattoo')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:50.197255Z","iopub.execute_input":"2025-01-31T22:59:50.197635Z","iopub.status.idle":"2025-01-31T22:59:50.218234Z","shell.execute_reply.started":"2025-01-31T22:59:50.197596Z","shell.execute_reply":"2025-01-31T22:59:50.217105Z"}},"outputs":[{"name":"stdout","text":"Sound of My Voice\nIn the Valley of Elah\nGone Girl\nShutter Island\nPulse\n","output_type":"stream"}],"execution_count":31},{"cell_type":"markdown","source":"# Saving Files for Website","metadata":{}},{"cell_type":"code","source":"import pickle\n\n# Making a pickle file for our dataframe \n# Saving as dicitonary for easy intgration with website\npickle.dump(movies.to_dict,open('movies_dict.pkl','wb'))\n\nprint('File Created')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:50.219234Z","iopub.execute_input":"2025-01-31T22:59:50.219526Z","iopub.status.idle":"2025-01-31T22:59:50.247204Z","shell.execute_reply.started":"2025-01-31T22:59:50.219502Z","shell.execute_reply":"2025-01-31T22:59:50.246104Z"}},"outputs":[{"name":"stdout","text":"File Created\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"# Making a similarity score file \npickle.dump(Movies_Cosine_Similarity, open('Similarity.pkl','wb'))\nprint('File Created')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-31T22:59:50.248269Z","iopub.execute_input":"2025-01-31T22:59:50.248627Z","iopub.status.idle":"2025-01-31T22:59:50.614358Z","shell.execute_reply.started":"2025-01-31T22:59:50.248594Z","shell.execute_reply":"2025-01-31T22:59:50.613534Z"}},"outputs":[{"name":"stdout","text":"File Created\n","output_type":"stream"}],"execution_count":33}]}